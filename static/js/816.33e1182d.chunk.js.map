{"version":3,"file":"static/js/816.33e1182d.chunk.js","mappings":"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","sources":["modules/Airlines/modules/PassengersList/components/loading/Loading.tsx","../node_modules/react-transition-group/esm/utils/ChildMapping.js","../node_modules/react-transition-group/esm/TransitionGroup.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","modules/Airlines/modules/PassengersList/components/success/Success.tsx","modules/Airlines/modules/PassengersList/components/Confirm/Confirm.tsx","modules/Airlines/modules/PassengersList/components/card/Card.tsx","modules/Airlines/modules/PassengersList/components/ErrorCard/ErrorCard.tsx","modules/Airlines/modules/PassengersList/PassengersList.tsx","modules/Core/hooks/useTheme.ts"],"sourcesContent":["import React from 'react';\r\nimport './loading.scss';\r\nimport {CSSTransition} from 'react-transition-group';\r\ninterface props {\r\n  isLoading: boolean;\r\n}\r\nconst Loading = ({isLoading}: props) => (\r\n  <CSSTransition in={isLoading} classNames=\"loading\" timeout={800} unmountOnExit mountOnEnter>\r\n    <div className=\"loading\">\r\n      <div className=\"loading__body\">\r\n        <p>Loading....</p>\r\n      </div>\r\n    </div>\r\n  </CSSTransition>\r\n);\r\n\r\nexport default Loading;\r\n","import { Children, cloneElement, isValidElement } from 'react';\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */\n\nexport function getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && isValidElement(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */\n\nexport function mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}\n\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\n\nexport function getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function (child) {\n    return cloneElement(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, 'appear', props),\n      enter: getProp(child, 'enter', props),\n      exit: getProp(child, 'exit', props)\n    });\n  });\n}\nexport function getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children).forEach(function (key) {\n    var child = children[key];\n    if (!isValidElement(child)) return;\n    var hasPrev = (key in prevChildMapping);\n    var hasNext = (key in nextChildMapping);\n    var prevChild = prevChildMapping[key];\n    var isLeaving = isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)\n\n    if (hasNext && (!hasPrev || isLeaving)) {\n      // console.log('entering', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      // item is old (exiting)\n      // console.log('leaving', key)\n      children[key] = cloneElement(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && isValidElement(prevChild)) {\n      // item hasn't changed transition states\n      // copy over the last transition props;\n      // console.log('unchanged', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    }\n  });\n  return children;\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { getChildMapping, getInitialChildMapping, getNextChildMapping } from './utils/ChildMapping';\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n};\n/**\n * The `<TransitionGroup>` component manages a set of transition components\n * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n * components, `<TransitionGroup>` is a state machine for managing the mounting\n * and unmounting of components over time.\n *\n * Consider the example below. As items are removed or added to the TodoList the\n * `in` prop is toggled automatically by the `<TransitionGroup>`.\n *\n * Note that `<TransitionGroup>`  does not define any animation behavior!\n * Exactly _how_ a list item animates is up to the individual transition\n * component. This means you can mix and match animations across different list\n * items.\n */\n\nvar TransitionGroup = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  } // node is `undefined` when user provided `nodeRef` prop\n  ;\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = _extends({}, state.children);\n\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n\n    var contextValue = this.state.contextValue;\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n        value: contextValue\n      }, children);\n    }\n\n    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(Component, props, children));\n  };\n\n  return TransitionGroup;\n}(React.Component);\n\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: PropTypes.any,\n\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: PropTypes.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nexport default TransitionGroup;","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import React, {memo} from 'react';\r\nimport './Success.scss';\r\nimport {CSSTransition} from 'react-transition-group';\r\nimport {useTypeSelector} from '../../../../../Core/hooks/useTypeSelector';\r\nimport {useAction} from '../../../../../Core/hooks/useAction';\r\n\r\nconst Success = () => {\r\n  const {isSuccess} = useTypeSelector((state) => state.cards);\r\n  const {setIsSuccess} = useAction();\r\n\r\n  return (\r\n    <CSSTransition in={isSuccess} timeout={200} classNames=\"success\" unmountOnExit mountOnEnter>\r\n      <div\r\n        className=\"success\"\r\n        onClick={() => {\r\n          setIsSuccess(false);\r\n        }}\r\n      >\r\n        <h1>Success</h1>\r\n        <p>You have successfully deleted the card</p>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default memo(Success);\r\n","import './Confirm.scss';\n\nimport React from 'react';\nimport {CSSTransition} from 'react-transition-group';\nimport {useTypeSelector} from '../../../../../Core/hooks/useTypeSelector';\nimport {useAction} from '../../../../../Core/hooks/useAction';\nimport {useNavigate, useParams} from 'react-router-dom';\n\nconst Confirm: React.FC = () => {\n  const {isConfirm, activeCard} = useTypeSelector((state) => state.cards);\n  const {setIsConfirm, deleteCardFunction} = useAction();\n  const {id} = useParams();\n  const navigate = useNavigate();\n\n  const handelSetCards = () => {\n    deleteCardFunction(activeCard!._id);\n    setIsConfirm(false);\n    if (id) {\n      navigate(-1);\n    }\n  };\n  return (\n    <CSSTransition in={isConfirm} timeout={500} classNames=\"confirm\" unmountOnExit mountOnEnter>\n      <div className=\"confirm\">\n        <div className=\"confirm__body\">\n          <p>Are you sure you want to delete the card?</p>\n          <div className=\"confirm__buttons\">\n            <button onClick={handelSetCards} disabled={!isConfirm}>\n              Yes\n            </button>\n            <button\n              onClick={() => {\n                setIsConfirm(false);\n              }}\n              disabled={!isConfirm}\n            >\n              No\n            </button>\n          </div>\n        </div>\n      </div>\n    </CSSTransition>\n  );\n};\n\nexport default React.memo(Confirm);\n","import './Card.scss';\r\n\r\nimport React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {useAction} from '../../../../../Core/hooks/useAction';\r\nimport {useTypeSelector} from '../../../../../Core/hooks/useTypeSelector';\r\n\r\ninterface props {\r\n  name: string;\r\n  trips: number;\r\n  id: string;\r\n}\r\n\r\nconst Card = ({name, trips, id}: props) => {\r\n  const {setIsConfirm} = useAction();\r\n  const {cards} = useTypeSelector((state) => state.cards);\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <Link to={cards.find(({_id}) => _id === id) ? `card/${id}` : '#'}>\r\n        <div className=\"card__body\">\r\n          <div className=\"card__info\">\r\n            <h2>Name: {name}</h2>\r\n            <p>Trips: {trips}</p>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n\r\n      <button className=\"card__button\" onClick={() => setIsConfirm(true)}>\r\n        &#10008;\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './ErrorCard.scss';\r\nimport {useAction} from '../../../../../Core/hooks/useAction';\r\nimport {CSSTransition} from 'react-transition-group';\r\nimport {useTypeSelector} from '../../../../../Core/hooks/useTypeSelector';\r\n\r\nconst ErrorCard: React.FC = () => {\r\n  const {isError} = useTypeSelector((state) => state.cards);\r\n  const {setIsError} = useAction();\r\n  return (\r\n    <CSSTransition in={isError} timeout={500} classNames=\"error-card\" unmountOnExit mountOnEnter>\r\n      <div className=\"error-card\">\r\n        <div className=\"error-card__body\">\r\n          <h2 className=\"error-card__title\">Error</h2>\r\n          <div className=\"error-card__title\">Some error has occurred</div>\r\n          <button className=\"error-card__button\" onClick={() => setIsError(false)}>\r\n            &#10008;\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default React.memo(ErrorCard);\r\n","import './PassengersList.scss';\n\nimport React, {MouseEvent, useEffect} from 'react';\nimport Loading from './components/loading/Loading';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport Success from './components/success/Success';\nimport Confirm from './components/Confirm/Confirm';\nimport Card from './components/card/Card';\nimport {useTypeSelector} from '../../../Core/hooks/useTypeSelector';\nimport {useAction} from '../../../Core/hooks/useAction';\nimport ErrorCard from './components/ErrorCard/ErrorCard';\nimport {Outlet, useParams} from 'react-router-dom';\nimport useTheme from '../../../Core/hooks/useTheme';\n\n/**\n * Страница со списком авиалиний\n */\nconst PassengersList: React.FC = () => {\n  const {id} = useParams();\n  const {isLoading, cards, isConfirm, isError} = useTypeSelector((state) => state.cards);\n  const {setActivCard, setIsConfirm} = useAction();\n  const [setTheme] = useTheme('fixed');\n\n  useEffect(() => {\n    isConfirm || isError || !!id ? setTheme('true') : setTheme('');\n  }, [isConfirm, isError, id]);\n  return (\n    <div className=\"cards-list\">\n      <ErrorCard />\n      <Loading isLoading={isLoading} />\n      <Success />\n      <Confirm />\n      <div className=\"cards-list__body\">\n        <TransitionGroup component=\"ul\">\n          {cards.map((element) => (\n            <CSSTransition timeout={500} key={element._id} classNames=\"item\">\n              <li className=\"item\" onClick={() => setActivCard(element)}>\n                <Card id={element._id} trips={element.trips} name={element.name} />\n              </li>\n            </CSSTransition>\n          ))}\n        </TransitionGroup>\n      </div>\n\n        <Outlet />\n\n    </div>\n  );\n};\nexport default React.memo(PassengersList);\n","import {useEffect, useState} from 'react';\r\nexport default function useTheme(Theme: string) {\r\n  const [theme, setTheme] = useState('');\r\n  useEffect(() => {\r\n    document.body.setAttribute(`data-${Theme}`, theme);\r\n  }, [theme]);\r\n  return [setTheme];\r\n}\r\n"],"names":["isLoading","CSSTransition","in","classNames","timeout","unmountOnExit","mountOnEnter","className","getChildMapping","children","mapFn","result","Object","create","Children","c","forEach","child","key","isValidElement","mapper","getProp","prop","props","getNextChildMapping","nextProps","prevChildMapping","onExited","nextChildMapping","prev","next","getValueForKey","i","nextKeysPending","pendingKeys","prevKey","length","push","childMapping","nextKey","pendingNextKey","mergeChildMappings","keys","hasPrev","hasNext","prevChild","isLeaving","cloneElement","bind","exit","enter","values","obj","map","k","TransitionGroup","_React$Component","context","_this","handleExited","call","this","self","ReferenceError","_assertThisInitialized","state","contextValue","isMounting","firstRender","_inheritsLoose","_proto","prototype","componentDidMount","mounted","setState","componentWillUnmount","getDerivedStateFromProps","_ref","appear","node","currentChildMapping","_extends","render","_this$props","Component","component","childFactory","_objectWithoutPropertiesLoose","React","TransitionGroupContext","value","propTypes","defaultProps","Success","isSuccess","useTypeSelector","cards","setIsSuccess","useAction","onClick","memo","Confirm","isConfirm","activeCard","setIsConfirm","deleteCardFunction","id","useParams","navigate","useNavigate","_id","disabled","name","trips","to","find","ErrorCard","isError","setIsError","PassengersList","setActivCard","Theme","useState","theme","setTheme","useEffect","document","body","setAttribute","useTheme","element"],"sourceRoot":""}
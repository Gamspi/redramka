{"version":3,"file":"static/js/269.865d869c.chunk.js","mappings":"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","sources":["modules/Airlines/modules/AirLineCard/AirLineCard.tsx","modules/Airlines/modules/components/Confirm/Confirm.tsx","modules/Core/redux/reducers/cards/action_craetors.ts","modules/Core/constants/limit.ts","modules/Core/redux/reducers/actions_creators.ts","modules/Core/hooks/useAction.ts","modules/Core/hooks/useTypeSelector.ts"],"sourcesContent":["import React from 'react';\r\nimport \"./AirLineCard.scss\"\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport Confirm from \"../components/Confirm/Confirm\";\r\nimport {useAction} from \"../../../Core/hooks/useAction\";\r\nimport {useTypeSelector} from \"../../../Core/hooks/useTypeSelector\";\r\nimport NotFoundPage from \"../../../Core/components/NotFoundPage/NotFoundPage\";\r\n\r\n/**\r\n * Карточка авиалинни\r\n */\r\nconst AirLineCard: React.FC = () => {\r\n    const {cards,activeCardId} = useTypeSelector(state => state.cards)\r\n    const navigate = useNavigate()\r\n    const {setIsConfirm} = useAction()\r\n    if(cards.find(({_id}) => _id === activeCardId)){\r\n        const [card] = cards.find(({_id}) => _id === activeCardId)!.airline\r\n\r\n        return (\r\n            <div className=\"info\">\r\n                <Confirm/>\r\n                <div className=\"info__body\">\r\n                    <img src={card.logo} alt={card.name}/>\r\n                    <article className=\"info__article\">\r\n                        <h2>Name: <span>{card.name}</span></h2>\r\n                        <p>Country: <span>{card.country}</span></p>\r\n                        <p>Established: <span>{card.established}</span></p>\r\n                        <p>Slogan: <span>{card.slogan}</span></p>\r\n                        <p>Head quaters: <span>{card.head_quaters}</span></p>\r\n                        <p>Website: <span><a href={card.website}>{card.website}</a></span></p>\r\n                    </article>\r\n                    <button className=\"info__button\" onClick={() => {\r\n                        setIsConfirm(true)\r\n                    }}>Delete\r\n                    </button>\r\n                    <button className=\"info__button-close\" onClick={() => navigate(-1)}>&#10008;</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return <NotFoundPage/>\r\n\r\n}\r\n\r\nexport default React.memo(AirLineCard);\r\n","import React from 'react';\r\nimport './Confirm.scss';\r\nimport {CSSTransition} from 'react-transition-group';\r\nimport {useTypeSelector} from \"../../../../Core/hooks/useTypeSelector\";\r\nimport {useAction} from \"../../../../Core/hooks/useAction\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\n\r\n\r\nconst Confirm:React.FC = () => {\r\n  const{isConfirm,activeCardId}=useTypeSelector(state => state.cards)\r\n  const{setIsConfirm,deleteCardFunction}=useAction()\r\n  const {id} = useParams()\r\n  const navigate = useNavigate()\r\n  const handelSetCards = () => {\r\n\r\n\r\n    deleteCardFunction(activeCardId)\r\n    setIsConfirm(false);\r\n    if(id){\r\n      navigate(-1)\r\n    }\r\n\r\n  };\r\n  return (\r\n    <CSSTransition in={isConfirm} timeout={500} classNames=\"confirm\" unmountOnExit mountOnEnter>\r\n      <div className=\"confirm\">\r\n        <div className=\"confirm__body\">\r\n          <p>Are you sure you want to delete the card?</p>\r\n          <div className=\"confirm__buttons\">\r\n            <button onClick={handelSetCards} disabled={!isConfirm}>\r\n              Yes\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                setIsConfirm(false);\r\n              }}\r\n              disabled={!isConfirm}\r\n            >\r\n              No\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default React.memo(Confirm);\r\n","import {\r\n    AuthActionEnum, deleteCardAction, setActiveCardIdAction,\r\n    setCardsAction, setIsConfirmAction,\r\n    setIsErrorAction,\r\n    setIsLoadingAction,\r\n    setPageAction, setSuccessAction,\r\n    setTotalPassengersAction\r\n} from \"./types\";\r\nimport {IPassengers} from \"../../../models/IPassengers\";\r\nimport {appDispatch} from \"../../store\";\r\nimport axios, {AxiosResponse} from \"axios\";\r\nimport {IResponse} from \"../../../models/IResponse\";\r\nimport {limit} from \"../../../constants/limit\";\r\n\r\nexport const CardsActionCreators = {\r\n    setCards: (cards: Array<IPassengers>): setCardsAction => ({type: AuthActionEnum.SET_CARDS, payload: cards}),\r\n    setTotalPassengers: (totalPassengers: number): setTotalPassengersAction => ({\r\n        type: AuthActionEnum.SET_TOTAL_PASSENGERS,\r\n        payload: totalPassengers\r\n    }),\r\n    setPage: (): setPageAction => ({type: AuthActionEnum.SET_PAGE}),\r\n    setIsError: (isError: boolean): setIsErrorAction => ({type: AuthActionEnum.SET_IS_ERROR, payload: isError}),\r\n    setIsSuccess: (isSuccess: boolean): setSuccessAction => ({type: AuthActionEnum.SET_SUCCESS, payload: isSuccess}),\r\n\r\n    setIsConfirm: (isConfirm: boolean): setIsConfirmAction => ({\r\n        type: AuthActionEnum.SET_IS_CONFIRM,\r\n        payload: isConfirm\r\n    }),\r\n\r\n    setId: (id: string): setActiveCardIdAction => ({type: AuthActionEnum.SET_ACTIVE_CARD_ID, payload: id}),\r\n\r\n    setIsLoading: (isLoading: boolean): setIsLoadingAction => ({\r\n        type: AuthActionEnum.SET_IS_LOADING,\r\n        payload: isLoading\r\n    }),\r\n    deleteCard: (id: string): deleteCardAction => ({type: AuthActionEnum.DELETE_CARD, payload: id}),\r\n\r\n    downloadCards: (page: number) => async (dispatch: appDispatch) => {\r\n        dispatch(CardsActionCreators.setIsLoading(true))\r\n        await axios.get(`https://api.instantwebtools.net/v1/passenger?page=${page}&size=${limit}`)\r\n            .then(({data}: AxiosResponse<IResponse<IPassengers>>) => {\r\n                dispatch(CardsActionCreators.setIsError(false))\r\n                dispatch(CardsActionCreators.setTotalPassengers(data.totalPassengers))\r\n                dispatch(CardsActionCreators.setCards(data.data))\r\n                dispatch(CardsActionCreators.setPage())\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.error(error)\r\n            })\r\n            .finally(() => {\r\n                    dispatch(CardsActionCreators.setIsLoading(false))\r\n                }\r\n            )\r\n\r\n    },\r\n    deleteCardFunction: (id: string) => async (dispatch: appDispatch) => {\r\n        dispatch(CardsActionCreators.setIsSuccess(false))\r\n        await axios.delete(`https://api.instantwebtools.net/v1/passenger/${id}`)\r\n            .then(() => {\r\n                dispatch(CardsActionCreators.deleteCard(id))\r\n            })\r\n            .then(() => {\r\n                dispatch(CardsActionCreators.setIsSuccess(true))\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n                dispatch(CardsActionCreators.setIsError(true))\r\n            })\r\n\r\n    }\r\n}\r\n\r\n\r\n","export const limit = 20;\r\n","import {CardsActionCreators} from \"./cards/action_craetors\";\r\n\r\nexport const allActionsCreators={\r\n    ...CardsActionCreators\r\n}\r\n","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from 'redux'\r\nimport {allActionsCreators} from \"../redux/reducers/actions_creators\";\r\n\r\nexport const useAction = () => {\r\n    /**\r\n     * создаем диспатч\r\n     */\r\n    const dispatch = useDispatch()\r\n    return bindActionCreators(allActionsCreators, dispatch)\r\n}\r\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {rootState} from \"../redux/store\";\r\n\r\nexport const useTypeSelector: TypedUseSelectorHook<rootState> = useSelector\r\n"],"names":["AirLineCard","useTypeSelector","state","cards","activeCardId","navigate","useNavigate","setIsConfirm","useAction","find","_id","card","airline","className","Confirm","src","logo","alt","name","country","established","slogan","head_quaters","href","website","onClick","NotFoundPage","React","isConfirm","deleteCardFunction","id","useParams","CSSTransition","in","timeout","classNames","unmountOnExit","mountOnEnter","disabled","CardsActionCreators","setCards","type","AuthActionEnum","payload","setTotalPassengers","totalPassengers","setPage","setIsError","isError","setIsSuccess","isSuccess","setId","setIsLoading","isLoading","deleteCard","downloadCards","page","dispatch","axios","then","data","catch","error","console","finally","log","allActionsCreators","useDispatch","bindActionCreators","useSelector"],"sourceRoot":""}